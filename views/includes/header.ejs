<!DOCTYPE html>
<html class="page">

<head>
  <title><%= typeof title == "undefined" ? "Home" : title %></title>
  <!-- <link rel="stylesheet" href="<%= req.URL %>/public/css/bootstrap.min.css" /> -->
  <link rel="stylesheet" href="<%= req.URL %>/public/css/style.css" />
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" rel="stylesheet" />
  
  <link rel="icon" type="image/x-icon" href="<%= req.URL %>/public/fav-icon.png" />
  <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.11.0/umd/popper.min.js"></script>
  <link rel="stylesheet" href="<%= req.URL %>/public/css/fontawesome.min.css" />
</head>

<body>
  <input type="hidden" id="base-url" value="<%= req.URL %>" />
  <svg xmlms = 'http://www.w3.org/2000/svg'>
    <defs>
      <filter id = 'goo'>
        <feGaussianBlur in = 'SourceGraphic' stdDeviation="10" result="blur"/>
        <feColorMatrix in="blur" mode="matrix" values="1 0 0 0 0  0 1 0 0 0  0 0 1 0 0  0 0 0 18 -7" result="goo" />
        <feBlend in="SourceGraphic" in2="goo" />
      </filter> 
    </defs>
  </svg>
  <div class="gradients-container">
    <div class="g1"></div>
    <div class="g2"></div>
    <div class="g3"></div>
    <div class="g4"></div>
    <div class="g5"></div>
    <div class="interactive"></div>
  </div>

  <script>
    var show = false;
    var months = [
      "January",
      "February",
      "March",
      "April",
      "May",
      "June",
      "July",
      "August",
      "September",
      "October",
      "November",
      "December",
    ];

    function dateAndTime(date) {
      const createdAt = new Date(date);
      const months = ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"];

      let hours = createdAt.getHours();
      const ampm = hours >= 12 ? 'PM' : 'AM';
      hours = hours % 12 || 12; // Convert hours to 12-hour format

      const formattedDate = createdAt.getDate() + " " + months[createdAt.getMonth()] + ", " +
        createdAt.getFullYear() + " " + hours + ":" +
        (createdAt.getMinutes() < 10 ? '0' : '') + createdAt.getMinutes() + ":" +
        (createdAt.getSeconds() < 10 ? '0' : '') + createdAt.getSeconds() + " " + ampm;
      return formattedDate;
    }

    function downloadFile(self) {
      var _id = self.getAttribute("data-id");

      self.innerHTML = "Loading...";
      self.setAttribute = ("disabled", "disabled");

      var ajax = new XMLHttpRequest();
      var baseUrl = document.getElementById("base-url").value;
      ajax.open("POST", baseUrl + "/Download", true);
      ajax.onreadystatechange = function() {
        if (ajax.readyState == 4) {
          self.removeAttribute("disabled");
          self.innerHTML = "Download";
          if (ajax.status == 200) {
            var data = JSON.parse(ajax.responseText);
            if (data.status == "error") {
              swal("Error", data.message, "eror");
            }
            if (data.status == "success") {
              var binary = "";
              var bytes = new Uint8Array(data.arrayBuffer.data);
              var len = bytes.byteLength;
              for (var i = 0; i < len; i++) {
                binary += String.fromCharCode(bytes[i]);
              }
              var base64 = window.btoa(binary);
              base64 = "data:" + data.fileType + ";base64," + base64;

              const fileName = data.fileName;
              const link = document.createElement("a");
              if (link.download !== undefined) {
                link.setAttribute("href", base64);
                link.setAttribute("download", fileName);
                link.style.visibility = "hidden";
                document.body.appendChild(link);
                link.click();
                document.body.removeChild(link);
              }
            }
          }
          if (ajax.status == 500) {
            console.log(ajax.responseText);
          }
        }
      };
      var formData = new FormData();
      formData.append("_id", _id);
      ajax.send(formData);
    }
    function showNavbar(event){
      if (event.target.closest('.search--bar')||event.target.closest('.login--info')) {
       return; 
       }

      const menuToggle = document.getElementById('navbarSupportedContent');
      const navbar = document.getElementById('navbar');
      if(show)
      {  
        menuToggle.classList.add("collapse");
        navbar.classList.remove("collapse-nav");
        show = false;
      }else{
        menuToggle.classList.remove("collapse");
        navbar.classList.add("collapse-nav");
        show = true;
      }
    }
    window.addEventListener('DOMContentLoaded', (event) => {
      let curX = 0;
      let curY = 0;
      let tgX = 0;
      let tgY = 0;

      const interBubble = document.querySelector('.interactive');

      function move() {
        curX += (tgX - curX) / 20;
        curY += (tgY - curY) / 20;
        interBubble.style.transform = `translate(${Math.round(curX)}px, ${Math.round(curY)}px)`;
        requestAnimationFrame(() => {
          move();
        });
      }

      window.addEventListener('mousemove', (event) => {
        tgX = event.clientX;
        tgY = event.clientY;
      });

      move();


      var index = window.location.href.substring((window.location.href).indexOf('3000/') + 5);
      try {
        if (index == "") {
          document.getElementById('Home').classList.add("active");
        }
        document.getElementById(index).classList.add("active");
      } catch (error) {}

    })
  </script>

  <% 

    formatBytes = function(bytes, decimals = 2){
        if(bytes === 0) return "0 Bytes";

        const k = 1024;
        const dm = decimals < 0 ? 0 : decimals; 
        const sizes = ["Bytes", "KB", "MB", "GB", "TB", "PB", "EB", "ZB", "YB"];

        const i = Math.floor(Math.log(bytes)/Math.log(k));

        return parseFloat((bytes/Math.pow(k,i)).toFixed(dm)) + " " + sizes[i];
    };
    dateAndTime = (date)=>{
      const createdAt = new Date(date);
      const months = ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"];

      let hours = createdAt.getHours();
      const ampm = hours >= 12 ? 'PM' : 'AM';
      hours = hours % 12 || 12; // Convert hours to 12-hour format

      const formattedDate = createdAt.getDate() + " " + months[createdAt.getMonth()] + ", " +
                        createdAt.getFullYear() + " " + hours + ":" +
                        (createdAt.getMinutes() < 10 ? '0' : '') + createdAt.getMinutes() + ":" +
                        (createdAt.getSeconds() < 10 ? '0' : '') + createdAt.getSeconds() + " " + ampm;
      return formattedDate;
    }
    getFolderSize = function (arr) {
        var sum = 0;
        for (var a = 0; a<arr.length; a++){
            if(arr[a].type == "folder"){
                if(arr[a].files.length > 0){
                    sum+= getFolderSize(arr[a].files);
                }
            } else {
                sum += arr[a].size;
            }
        }
        return sum;
    };
    %>

  <nav class="navbar navbar-expand-lg navbar-light" id="navbar"  onclick="showNavbar(event)">
    <a class="navbar-brand" href="<%= req.URL %>">File Server</a>
    <div class="collapse navbar-collapse" id="navbarSupportedContent">
      <ul class="navbar-nav mr-auto">
        <li class="nav-item" id="Home">
          <a href="<%= req.URL %>" class="nav-link ">
            Home <span class="sr-only">(current)</span></a>
        </li>
        <li class="nav-item" id="MyUploads">
          <a href="<%= req.URL %>/MyUploads" class="nav-link ">My Uploads</a>
        </li>
        <li class="nav-item" id="SharedWithMe">
          <a href="<%= req.URL %>/SharedWithMe" class="nav-link " >Shared With Me</a>
        </li>
        <li class="nav-item" id="MySharedLinks">
          <a href="<%= req.URL %>/MySharedLinks" class="nav-link ">My Shared Links</a>
        </li>
        <% if(!req.isLogin) { %>
        <li class="nav-item" id="Login">
          <a href="<%= req.URL %>/Login" class="nav-link ">Login</a>
        </li>
        <li class="nav-item" id="Register">
          <a href="<%= req.URL %>/Register" class="nav-link ">Register</a>
        </li>
        <% } else {%>
        <li class="search--bar" onclick="showNavbar(event)">
          <form action="<%= req.URL %>/Search" method="GET" class="form-inline my-2 my-lg-0" style="display: flex;">
            <input type="search" placeholder="Search" name="search" value="<%= req.query.search %>" class="form-control mr-sm-2"  style="border: 0 !important; background-color: transparent;" required />
            <button type="submit" class="btn my-2 my-sm-0"  style="border: 0 !important;"><i class="fa-solid fa-magnifying-glass"></i></button>
          </form>
        </li>
        <% } %>
      </ul>
    </div>
    <% if(req.isLogin) { %>
      <ul class="navbar-nav mr-auto login--info" style="display: contents;" onclick="showNavbar(event)">
      <li class="nav-item dropdown" id="Profile">
        <div class="dropdown" style=" display: initial; ">
          <a href="#" role="button" class="nav-link  dropdown-toggle" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false" class="btn">
            <%= req.session.user.name %>
            <span class="caret"></span>
          </a>
          <ul class="dropdown-menu" style="    position: absolute;
          min-width: 0;
          width: 108px !important;">
            <li>
              <a href="<%= req.URL %>/Profile" class="dropdown-item hover-warning">Profile</a>
            </li>
            <li>
              <a href="<%= req.URL %>/Logout" class="dropdown-item hover-danger">Log out</a>
            </li>
          </ul>
      </li>
      </ul>
      <% }%>
  </nav>
</body>

</html>